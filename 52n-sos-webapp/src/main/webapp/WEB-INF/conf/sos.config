#####################################################################
# Copyright (C) 2008
# by 52 North Initiative for Geospatial Open Source Software GmbH
#
# Contact: Andreas Wytzisk
# 52 North Initiative for Geospatial Open Source Software GmbH
# Martin-Luther-King-Weg 24
# 48155 Muenster, Germany
# info@52north.org
#
# This program is free software; you can redistribute and/or modify it under 
# the terms of the GNU General Public License version 2 as published by the 
# Free Software Foundation.
#
# This program is distributed WITHOUT ANY WARRANTY; even without the implied
# WARRANTY OF MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program (see gnu-gpl v2.txt). If not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA or
# visit the Free Software Foundation web page, http://www.fsf.org.
#
# Author: <LIST OF AUTHORS/EDITORS>
# Created: 2005-08-15
# Modified: <DATE OF LAST MODIFICATION (optional line)>
#####################################################################

####################################################################
### SOS configuration
####################################################################

# select the supported versions 0 = SOS 1.0.0 and SOS 2.0 (default), 1 = only SOS 1.0.0, 2 = only SOS 2.0
SUPPORTED_VERSIONS=${conf.sos.supported.versions}

# Maximum number of GetObservation results (0 or blank for unlimited)
MAX_GET_OBS_RESULTS=${conf.sos.getObs.maxResults}

# path to the measuring point file
CONFIG_FILE_PATH=${conf.sos.configFile.path}

# path to the configuration file
CONFIGURATION_FILES=${conf.sos.configFile.map}

# DAOFactory instance configuration
# put in the classname of the specific DAOFactory implementation including the packagename (CHANGE!)
DAOFactory=${conf.sos.ds.daofactory}

### Listener configuration
### comma seperated list of the classnames of the listeners (no whitespace allowed!)
LISTENERS=${conf.sos.listeners}

SERVICEIDENTIFICATION=${conf.sos.serviceidentificationfile}

SERVICEIDENTIFICATIONKEYWORDS=${conf.sos.capabilities.identification.keywords}

SERVICEPROVIDER=${conf.sos.serviceproviderfile}

### absoulte path of the directory with the sensor descriptions in sensorML format
SENSORDIR=${conf.sos.sensordir}

### level for logging !!!ONLY FOR INFO !!! CHANGES HAVE NO EFFECT !!! Change the log4j.properties file in the classes folder.
LOGLEVEL=${conf.sos.loglevel}

### absolute path to directory where the log files should be located to !!! ONLY FOR INFO !!! CHANGES HAVE NO EFFECT !!! Change the log4j.properties file in the classes folder.
LOGDIR=${conf.sos.logdir}

### implementation of IOMEncoder used to encode observations (has to be reimplemented, if new observation types should be supported)
OMENCODER=${conf.sos.10.omEncoder}

### implementation of IGMLEncoder used to encode observations (has to be reimplemented, if new feature types for featureOfInterests should be supported)
GMLENCODER=${conf.sos.10.gmlEncoder}

### implementation of IOWSEncoder used to encode observations
FEATUREENCODER=${conf.sos.10.featureEncoder}

### implementation of IOWSEncoder used to encode observations
OWSENCODER=${conf.sos.10.owsEncoder}

### HttpPostRequestDecoder SOS 1.0 implementation (implementation of IHttpPostRequestDecoder)
POSTREQUESTDECODER_V1=${conf.sos.10.postRequestDecoder}

### HttpGetRequestDecoder SOS 1.0 implementation (implementation of IHttpGetRequestDecoder)
GETREQUESTDECODER_V1=${conf.sos.10.getRequestDecoder}

### SosRequestEncoder implementation (implementation of ISosRequsetEncoder)
REQUESTENCODER=${conf.sos.10.requestEncoder}

### SosResponseEncoder implementation (implementation of ISosResponseEncoder)
RESPONSEENCODER_V1=${conf.sos.10.responseEncoder}

### SensorMLEncoder implementation (implementation of ISensorMLEncoder)
SMLENCODER_V1=${conf.sos.10.sensorMLEncoder}

### property indicates, whether SOS supports quality information in Observtions (true) or not (false)
SUPPORTSQUALITY=${conf.sos.supportsQuality}

### EPSG code of the stored geometries 
DEFAULT_EPSG=${conf.sos.datasource.EPSG.code}

### property keeps a list of all EPSG codes for which the SOS has to switch coordinates; 
SWITCHCOORDINATESFOREPSG=${conf.sos.switchCoordinatesForEPSG}

### property indicates whether duplicate observations should be skipped silently when inserted by batch
SKIP_DUPLICATE_OBSERVATIONS=${conf.sos.skipDuplicateObservations}

###property indicates, whether SOS encodes the complete FOI-instance within an Observation instance or just the FOI id
FOI_ENCODED_IN_OBSERVATION=${conf.sos.foiEncodedInObservation}

###property indicates, whether to include list of FOI IDs in offerings
FOI_LISTED_IN_OFFERINGS=${conf.sos.foiListedInOfferings}

###property indicates whether SOS encodes complete child procedure Systems in a parents DescribeSensor response
###or just the id and link
CHILD_PROCEDURES_ENCODED_IN_PARENTS_DESCRIBESENSOR=${conf.sos.childProceduresEncodedInParentsDescribeSensor}

### property indicates, whether OperationMetadata in GetCapabilities response contains only property names or property names and allowed values
SHOW_FULL_OPERATIONS_METADATA=${conf.sos.showFullOperationsMetadata}

### property indicates, whether OperationMetadata for Getobservation in GetCapabilities response contains only property names or property names and allowed values for FeatureOfInterest(default = false)
SHOW_FULL_OPERATIONS_METADATA_4_OBSERVATIONS=${conf.sos.showFullOperationsMetadata4Observations}

### time of lease for result template in getResult operation
LEASE=${conf.sos.result.lease}

### token seperator in result element
TOKENSEPERATOR=${conf.sos.result.tokenseperator}

### tuple seperator in result element
TUPLESEPERATOR=${conf.sos.result.tupleseperator}

### decimal separator in result element
DECIMALSEPARATOR=${conf.sos.result.decimalSeparator}

### date format of GML
GMLDATEFORMAT=${conf.sos.gmlDateFormat}

### no data value ###
NODATAVALUE=${conf.sos.result.nodatavalue}

####character encoding for response documents
CHARACTERENCODING=${conf.sos.characterEncoding}

#### prefix URN for the spatial reference system 
SRS_NAME_PREFIX=${conf.sos.10.srs.prefix}

### capabilitiesCacheController implementation (CapabilitiesCacheController)
CAPABILITIESCACHECONTROLLER=${conf.sos.capabilitiesCacheController}

### capabilitiesCacheUpdateInterval (0 = no automatic update!)
CAPABILITIESCACHEUPDATEINTERVAL=${conf.sos.capabilitiesCacheUpdateInterval}

### URL of this SOS.
SOS_URL=${conf.sos.service.url}

# support for dynamic locations as spatial values (default=false)
SUPPORT_DYNAMIC_LOCATION=${conf.sos.supportDynamicLocation}

# observable property for dynamic locations
SPATIAL_OBSERVABLE_PROPERTY=${conf.sos.dynamicLocation.observableProperty}

# dynamic location setting for foi (default=false)
DYNAMIC_FOI_LOCATION=${conf.sos.setFoiLocationDynamically}

# the default prefix for an auto generated offering (if not defined in RegisterSensor request)
DEFAULT_OFFERING_PREFIX=${conf.sos.prefix.default.offering}

# the default prefix for an auto generated procedure (if not defined in RegisterSensor request)
DEFAULT_PROCEDURE_PREFIX=${conf.sos.prefix.default.procedure}

########################################
# special settings for SOS 2.0 support #
########################################

### implementation of IOMEncoder used to encode observations (has to be reimplemented, if new observation types should be supported)
OM2ENCODER=${conf.sos.20.om2Encoder}

### implementation of IGMLEncoder used to encode observations (has to be reimplemented, if new feature types for featureOfInterests should be supported)
GML321ENCODER=${conf.sos.20.gml321Encoder}

### implementation of IOWSEncoder used to encode observations
FEATUREENCODER4SOSV2=${conf.sos.20.featureEncoder4SosV2}

### implementation of IOWSEncoder used to encode observations
OWSENCODER4SOSV2=${conf.sos.20.owsEncoder4SosV2}

### HttpPostRequestDecoder SOS 2.0 implementation (implementation of IHttpPostRequestDecoder)
POSTREQUESTDECODER_V2=${conf.sos.20.postRequestDecoder}

### HttpGetRequestDecoder SOS 2.0 implementation (implementation of IHttpGetRequestDecoder)
GETREQUESTDECODER_V2=${conf.sos.20.getRequestDecoder}

### ISosResponseEncoder SOS 2.0 implementation (implementation of ISosResponseEncoder)
RESPONSEENCODER_V2=${conf.sos.20.responseEncoder}

### SensorMLEncoder implementation (implementation of ISensorMLEncoder)
SMLENCODER_V2=${conf.sos.20.sensorMLEncoder}

#### prefix URN for the spatial reference system
SRS_NAME_PREFIX_SOS_V2=${conf.sos.20.srs.prefix}
